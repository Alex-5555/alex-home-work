'''
# На вход функция more_than_five(lst) получает список из целых чисел.
# Результатом работы функции должен стать новый список, в котором 
# содержатся только те числа, которые больше 5 по модулю.
def more_than_five(lst):
    lst_ = []
    for y in lst:
        if abs(y) > 5:
            lst_.append(y)
    return lst_
print(more_than_five([1, 3, 6, -7, 9, 11]))

def more_than_five(lst):
    lst_ = [y for y in lst if abs(y) > 5]
    return lst_
print(more_than_five([1, 3, 6, -7, 9, 11]))

# Евгению предоставили строку, состоящую из русских букв разных 
# регистров, и попросили очистить ее от заглавных литер. Как ему 
# показалось, он написал верный код, но результат совсем не порадовал. 
# Ниже представлен пример работы «чистильщика строк», которому срочно 
# требуется ваша помощь.
def str_dell(st):
    st_1 = ''
    for y in st:
        if not y.isupper():
            st_1 += y
            st = st_1
    return str(st)
print(str_dell('AaGv'))

def str_dell(st):
    st_1 = [y for y in st if not y.isupper()]
    return "".join(st_1)
print(str_dell('AaGv'))

# Анна решила представить некую таблицу с заглавными и строчными 
# буквами русского алфавита в красивом формате. Об этом ее попросили
# англоязычные друзья из социальных сетей.
# Недолго думая девушка создала скрипт, который выполнял подобную
# операцию. Результат работы программы продемонстрирован ниже. 
# Сможете повторить (в строках с галочками - их 27 штук, чтобы вам 
# не пришлось долго считать)? Для идентичности результатов примените
# любой моноширинный шрифт (в котором все символы имеют одинаковую 
# ширину).
rus_lower = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя'
for position in range(11):
    print('^' * 27)
    for letter in rus_lower:
        if rus_lower.index(letter) % 11 == position:
            print('| ', letter.upper(), letter, ' |', end='')
    print()
print('^' * 27)

# Для идентификации своего круга проверенных лиц будущий тайный агент
# (ведь все о чем-то мечтают) Максим решил пускать на свою страничку 
# в Интернете только тех, чьи никнеймы есть в его секретном списке. 
# Он уверен в своих людях (особенно в том, что они по глупости не 
# расскажут никому своё секретное прозвище), как и в том, что имена
# товарищей невозможно подобрать случайно.

# К слову, вот этот список: Мавпродош, Лорнектиф, Древерол, 
# Фиригарпиг, Клодобродыч. 
# По мере увеличения круга знакомых Максим, естественно, дополнит
# данный список.

# Ваша задача такова: повторите код, который будет спрашивать у 
# пользователя его ник и либо пускать на сайт (выведется сообщение 
# «Ты – свой. Приветствую, любезный {НИК_ПОСЕТИТЕЛЯ}!»), либо нет 
# (в этом случае будет такой текст: «Тут ничего нет. Еще есть 
# вопросы?». 
# Фактически, будущий супергерой решил поиздеваться над теми, кого
# нет в его удивительном перечне, так как им будет показываться это
# сообщение постоянно. 
# Очень коварный замысел!).
# Для проверки прозвищ посетителей используйте встроенную функцию 
# input().
lst = ['Мавпродош', 'Лорнектиф', 'Древерол', 'Фиригарпиг', \
       'Клодобродыч']
x = input('Введи свой ник ? - ')
if x in lst:
    print(f'Ты – свой. Приветствую, любезный {x}!')
else:
    print("Тут ничего нет. Еще есть вопросы?")

lst = ['Мавпродош', 'Лорнектиф', 'Древерол', 'Фиригарпиг', \
       'Клодобродыч']
x = input('Введи свой ник ? - ')
while x in lst:
    print(f'Ты – свой. Приветствую, любезный {x}!')
else:
    print("Тут ничего нет. Еще есть вопросы?")

# Валентина прогуляла лекцию по математике. 
# Преподаватель решил подшутить над нерадивой студенткой и 
# попросил ее на практическом занятии перечислить все положительные 
# делители некоторых целых чисел. 
# Для несложных примеров студентка быстро нашла решения (для числа 
# 6 это: 1, 2, 3, 6; а для числа 16 это: 1, 2, 4, 8, 16), но этим 
# все не закончилось. 
# На домашнее задание ей дали варианты посложнее: 23436, 190187200, 
# 380457890232.
# Решить такое вручную, как вы понимаете, практически нереально. 
# Вот Валентина и обратилась к вам за помощью.  
# Помогите ей (при помощи функции all_divisors(number)). 
# Постарайтесь найти самое оптимальное решение. 
# Результат представьте в виде списка (не забудьте отсортировать 
# по возрастанию).

def all_divisors(number):
    sp = []
    for x in range(1, number + 1):
        if number % x == 0:
            sp.append(x)
    return sp
print(all_divisors(8))
'''
def all_divisors(number):
    sp = [1, number]
    for x in range(2, 1 + int(number ** 0.5)):
        if number % x == 0:
            sp.extend({number//x, x})
    return sp
print(all_divisors(190187200))