'''
# На входе функция to_set() получает строку или список чисел. 
# Преобразуйте их в множество. На выходе должно получиться 
# множество и его мощность.
def to_set(str):
    return set(str), len(set(str))
print(to_set('agfa'))

# Имеется список с произвольными данными. Поставлена задача 
# преобразовать его в множество. Если какие-то элементы нельзя 
# хешировать, то пропускаем их. Функция list_to_set() выводит на 
# печать получившееся множество.
from collections.abc import Hashable
def list_to_set(lst):
    return {x for x in lst if isinstance(x, Hashable)}
print(list_to_set([1, 3, 'off', {'a': 'b'}, 7, 9]))

# На основании 3 исходных множеств (передаются в качестве 
# аргументов функции diff()) требуется написать функцию, которая 
# будет возвращать либо симметричную разность, либо просто разность 
# (если дополнительный аргумент функции symmetric имеет значение 
# False) приведенных объектов в порядке: 1-ое множество, 
# 2-ое множество, 3-е множество.
set_1 = {3, 4, 5, 6, 20}
set_2 = {4, 6, 7, 8, 9}
set_3 = {5, 3, 8, 1}
def diff(set_1, set_2, set_3, simmetric = True):
    if simmetric:
        return set_1 ^ set_2 ^ set_3
    return set_1 - set_2 - set_3
print(diff(set_1, set_2, set_3))

set_1 = {3, 4, 5, 6, 20}
set_2 = {4, 6, 7, 8, 9}
set_3 = {5, 3, 8, 1}
def diff(set_1, set_2, set_3, simmetric = True):
    if simmetric:
        return set_1.symmetric_difference(set_2).symmetric_difference(set_3)
    return set_1.difference(set_2, set_3)
print(diff(set_1, set_2, set_3))       

# Напишите функцию superset(), которая принимает 2 множества. 
# Результат работы функции: вывод в консоль одного из сообщений в 
# зависимости от ситуации:
# 1 - «Супермножество не обнаружено»
# 2 – «Объект {X} является чистым супермножеством»
# 3 – «Множества равны»

set_1 = {1, 8, 3, 5}
set_2 = {3, 5}
def superset(set_1, set_2):
    if set_1 > set_2:
        return 'Объект {set_1} является чистым супермножеством'
    elif set_1 == set_2:
        return 'Множества равны'  
    elif set_1 < set_2:
        return 'Объект {set_2} является чистым супермножеством'     
    else:
        return 'Супермножество не обнаружено' 
print(superset(set_1, set_2))
'''
# Предоставлен список натуральных чисел. Требуется сформировать из 
# них множество. Если какое-либо число повторяется, то преобразовать 
# его в строку по образцу: например, если число 4 повторяется 3 раза,
# то в множестве будет следующая запись: само число 4, строка «44» 
# (второе повторение, т.е. число дублируется в строке), строка «444»
# (третье повторение, т.е. строка множится на 3). Реализуйте вывод
# множества через функцию set_gen().
def set_gen(lst):
    index = 0
    while index < len(lst):
        cnt = lst.count(lst[index])
        if cnt > 1:
            lst[index] = str(lst[index]) * cnt
        index += 1
    return set(lst)
print(set_gen([1, 1, 3, 3, 1]))
          